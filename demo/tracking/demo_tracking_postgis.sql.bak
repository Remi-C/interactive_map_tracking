-------------------------------
--Rémi-C
--Thales IGN 02/2015
-------------------------------

/** This script create a postgis table that can be used for tracking with QGIS plugin "Interactive Map Tracking"
How to use it : 
 - install "Interactive Map Tracking" from qgis plugin repository or 
 - start an empty QGIS project, or open an existing one
 -  

*/
 --checking that postgis is installed
 CREATE EXTENSION IF NOT EXISTS postgis ;
 
 --creating a schema to put our tracking table
 CREATE SCHEMA IF NOT EXISTS tracking ;

 --creating the minimal tracking table, other column can be added at will
 DROP TABLE IF EXISTS tracking.camera_position ;
 CREATE TABLE IF NOT EXISTS tracking.camera_position ( 
	gid SERIAL PRIMARY KEY --mandatory
	,geom geometry(polygon,4326)  --use your custom SRID here
	,user_id text --mandatory
	,w_time timestamp with time zone  --mandatory
 ); 
--creating index is not mandatory but will speed up all usual operations on those columns
CREATE INDEX ON tracking.camera_position USING GIST(geom) ; 
CREATE INDEX ON tracking.camera_position (user_id ) ; 
CREATE INDEX ON tracking.camera_position (w_time ) ; 

--checking that the table was correctly created
 SELECT *
 FROM tracking.camera_position;  

--creating a function that will be called by the trigger
 CREATE OR REPLACE FUNCTION rc_correct_gid_on_insert(  )
  RETURNS  trigger  AS
$BODY$ 
/** @brief : this trigger insert the correct gid into table if QGIS provides 0 or NULL gid (default behaviour). 
*/ 
	DECLARE
	_getting_next_val text;  
	_q text ; 
	_next_val int;  
	BEGIN  
		 
		IF NEW.gid <=0 OR NEW.gid IS NULL THEN --case when inserted gid is not valid
			SELECT  column_default INTO _getting_next_val --getting the next value of serial field
			from information_schema.columns 
			WHERE table_schema = TG_TABLE_SCHEMA --the schema name is accessbile at execution time, no need to hard code it
				AND table_name=TG_TABLE_NAME --same for table name
				AND column_name = 'gid';
			_q := 'SELECT '||_getting_next_val ; 
			EXECUTE _q INTO _next_val ; 
			
			NEW.gid := _next_val; 	
		END IF;   
		return NEW ; 
	END ;
	$BODY$
  LANGUAGE plpgsql VOLATILE;
  
 --now associating the function to any UPDATE OR INSERT happening on teacking table.
DROP TRIGGER IF EXISTS rc_correct_gid_on_insert ON  tracking.camera_position; 
CREATE TRIGGER rc_correct_gid_on_insert 
BEFORE  UPDATE OR INSERT
ON tracking.camera_position
FOR ROW 
EXECUTE PROCEDURE rc_correct_gid_on_insert() ;
 